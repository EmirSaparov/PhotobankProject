{"name": "test_edit_project", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\n  (Session info: chrome=119.0.6045.160); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nStacktrace:\n\tGetHandleVerifier [0x00007FF6912982B2+55298]\n\t(No symbol) [0x00007FF691205E02]\n\t(No symbol) [0x00007FF6910C05AB]\n\t(No symbol) [0x00007FF6910C509C]\n\t(No symbol) [0x00007FF6910C6FDF]\n\t(No symbol) [0x00007FF6910C70D0]\n\t(No symbol) [0x00007FF691103852]\n\t(No symbol) [0x00007FF6911028C1]\n\t(No symbol) [0x00007FF6910F87BF]\n\t(No symbol) [0x00007FF6911220AA]\n\t(No symbol) [0x00007FF6910F80CF]\n\t(No symbol) [0x00007FF6911222C0]\n\t(No symbol) [0x00007FF69113AAA4]\n\t(No symbol) [0x00007FF691121E83]\n\t(No symbol) [0x00007FF6910F670A]\n\t(No symbol) [0x00007FF6910F7964]\n\tGetHandleVerifier [0x00007FF691610AAB+3694587]\n\tGetHandleVerifier [0x00007FF69166728E+4048862]\n\tGetHandleVerifier [0x00007FF69165F173+4015811]\n\tGetHandleVerifier [0x00007FF6913347D6+695590]\n\t(No symbol) [0x00007FF691210CE8]\n\t(No symbol) [0x00007FF69120CF34]\n\t(No symbol) [0x00007FF69120D062]\n\t(No symbol) [0x00007FF6911FD3A3]\n\tBaseThreadInitThunk [0x00007FFF5925257D+29]\n\tRtlUserThreadStart [0x00007FFF5A74AA58+40]", "trace": "self = <test.TestMainPage object at 0x000001A3EF17A8D0>, browser = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"613657108b44ffdf78df9a2503639691\")>\n\n    def test_edit_project(self, browser):\n        page = MainPage(browser=browser, url=f'{self.url}/ru/projects')\n        page.open()\n        page.login()\n>       page.edit_project()\n\ntest.py:276: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages\\main_page.py:177: in edit_project\n    edit_button.click()\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:93: in click\n    self._execute(Command.CLICK_ELEMENT)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:394: in _execute\n    return self._parent.execute(command, params)\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:344: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001A3EF51A390>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"stale element reference\",\"message\":\"stale element reference: stale elemen...07FF6911FD3A3]\\\\n\\\\tBaseThreadInitThunk [0x00007FFF5925257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FFF5A74AA58+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.StaleElementReferenceException: Message: stale element reference: stale element not found\nE         (Session info: chrome=119.0.6045.160); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#stale-element-reference-exception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6912982B2+55298]\nE       \t(No symbol) [0x00007FF691205E02]\nE       \t(No symbol) [0x00007FF6910C05AB]\nE       \t(No symbol) [0x00007FF6910C509C]\nE       \t(No symbol) [0x00007FF6910C6FDF]\nE       \t(No symbol) [0x00007FF6910C70D0]\nE       \t(No symbol) [0x00007FF691103852]\nE       \t(No symbol) [0x00007FF6911028C1]\nE       \t(No symbol) [0x00007FF6910F87BF]\nE       \t(No symbol) [0x00007FF6911220AA]\nE       \t(No symbol) [0x00007FF6910F80CF]\nE       \t(No symbol) [0x00007FF6911222C0]\nE       \t(No symbol) [0x00007FF69113AAA4]\nE       \t(No symbol) [0x00007FF691121E83]\nE       \t(No symbol) [0x00007FF6910F670A]\nE       \t(No symbol) [0x00007FF6910F7964]\nE       \tGetHandleVerifier [0x00007FF691610AAB+3694587]\nE       \tGetHandleVerifier [0x00007FF69166728E+4048862]\nE       \tGetHandleVerifier [0x00007FF69165F173+4015811]\nE       \tGetHandleVerifier [0x00007FF6913347D6+695590]\nE       \t(No symbol) [0x00007FF691210CE8]\nE       \t(No symbol) [0x00007FF69120CF34]\nE       \t(No symbol) [0x00007FF69120D062]\nE       \t(No symbol) [0x00007FF6911FD3A3]\nE       \tBaseThreadInitThunk [0x00007FFF5925257D+29]\nE       \tRtlUserThreadStart [0x00007FFF5A74AA58+40]\n\nvenv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: StaleElementReferenceException"}, "attachments": [{"name": "stdout", "source": "276d36f4-50aa-43fa-9861-2684f8394f40-attachment.txt", "type": "text/plain"}], "start": 1700643217519, "stop": 1700643221743, "uuid": "6bcf5cbe-c616-4f88-8cb0-9724b519150b", "historyId": "92f26e8015bc7af447dc65f76b7343be", "testCaseId": "92f26e8015bc7af447dc65f76b7343be", "fullName": "test.TestMainPage#test_edit_project", "labels": [{"name": "suite", "value": "test"}, {"name": "subSuite", "value": "TestMainPage"}, {"name": "host", "value": "EMIR-S-QA"}, {"name": "thread", "value": "37296-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test"}]}